;==========================================
; Archivo PostLab5.s
; Dispositivo: PIC16F887
;Autor: Christian Campos
;Compilador pic-as (v2.30), MPLABX V5.40
;
; Programa: Contador binario de 4 bits en el que cada incremento se realizará cada 100ms
; Hardware: 
; 
;Creado: 25 feb, 2023
; Última modficación: 1 marzo, 2023
;==========================================

    PROCESSOR 16F887
    #include <xc.inc>

;============ CONFIGURACION ============

    CONFIG FOSC = INTRC_NOCLKOUT
    CONFIG WDTE = OFF
    CONFIG PWRTE = ON
    CONFIG MCLRE = OFF
    CONFIG CP = OFF
    CONFIG CPD = OFF

    CONFIG BOREN = OFF
    CONFIG IESO = OFF   
    CONFIG FCMEN = OFF
    CONFIG LVP = OFF

    CONFIG WRT = OFF
    CONFIG BOR4V = BOR40V
    
    UP	    EQU 0
    DOWN    EQU 1
   
    reset_tmr0 macro
	BANKSEL TMR0
	movlw	12		    
	movwf	TMR0	
	BANKSEL PORTA
	endm
    
;============ VARIABLES ============

    PSECT udata_bank0	
    cont_a: DS 1	; variable contador segundos
    cont_b: DS 1	; variable contador decenas
    cont_c: DS 1	; variable contador centenas
    W_temp: DS 1
    STATUS_temp: DS 1
    display0: DS 1	; valor a mostrar en display
    display1: DS 1
    display2: DS 1
    count: DS 2		; valor de PORTA a manipular
    sel_dis: DS 2	; 
    alarma: DS 1
    
;============ RESET ============
    
    PSECT resVect, class=CODE, abs, delta=2
    ORG 00h
    
    resetVec: 
    PAGESEL main
    goto main
	
;============ INTERRUPCIONES ============
    ORG 04h
    
    push:			; guardando status y w
	movwf	W_temp
	swapf	STATUS, W
	movwf	STATUS_temp
	
    isr:			; rutinas de interrupcion
	btfsc	RBIF		; bandera de cambio en portb
	call	int_PORTB	
	btfsc	T0IF		; bandera de cambvio en tmr0
	call	int_TMR0
	
    pop:			; regresando los valores de status y w
	swapf	STATUS_temp, W
	movwf	STATUS
	swapf	W_temp, F
	swapf	W_temp, W
	retfie

;============ SUBRUTINAS INTERRUPCIONES ============	
	
    int_PORTB:			; subrutina de interrupcion portb
	btfss	PORTB, UP	; UP = 0 se incrementa el contador
	incf	PORTA	
	btfss	PORTB, DOWN	; UP = 0 se decrementa el contador
	decf	PORTA
	bcf	RBIF		; rst bandera
	return
	
    int_TMR0:			; subrutina de interrupcion tmr0
	reset_tmr0
	bcf	T0IF		; rst bandera
	bsf	alarma, 0	; enciende la alarmaa
	return
	
;============ MAIN ============
	
    PSECT code, delta=2, abs
    ORG 100h
    
    tabla:
	clrf	PCLATH
	bsf	PCLATH, 0   ; PCLATH en 01
	andlw	15
	addwf	PCL	    ; PC = PCLATH + PCL (offset)
    retlw 11000000B; 0
    retlw 11111001B; 1
    retlw 10100100B; 2
    retlw 10110000B; 3
    retlw 10011001B; 4
    retlw 10010010B; 5
    retlw 10000010B; 6
    retlw 11111000B; 7
    retlw 10000000B; 8
    retlw 10010000B; 9

    main:
	call config_io
	call config_tmr0
	call config_clk
	call config_int
	BANKSEL	PORTA	
	

;============ CONFIG I/O ============
    config_io:
    
	BANKSEL ANSEL
	clrf    ANSEL		; PINES DIGITALES
	clrf    ANSELH

	BANKSEL TRISA
	clrf	TRISA		; PORTA Salida
	clrf	TRISB
	bsf	TRISB, UP
	bsf	TRISB, DOWN	; PORTB 0 y 1 Entrada, Resto Salida 
	clrf	TRISC		; PORTC Salida
	movlw	11111000B
	movwf	TRISD
	
	BANKSEL	OPTION_REG	; Habilitar globalmente pullup PORTB
	bcf	OPTION_REG, 7
	BANKSEL	WPUB		; Configuracion Pullup PORTB
	clrf	WPUB
	bsf	WPUB, UP	
	bsf	WPUB, DOWN
	
	BANKSEL	IOCB		; Habilitando interrupciones PORTB
	clrf	IOCB
	bsf	IOCB, UP	
	bsf	IOCB, DOWN
	
	BANKSEL PORTA		; valores iniciales puertos y variables
	clrf	PORTA
	movlw	11000000B
	movwf	PORTC
	clrf	PORTD
	
	clrf	cont_a
	clrf	cont_b
	clrf	cont_c
	clrf	count
	clrf	alarma
	
	return
	
;============ CONFIG CLK ============
    
    config_clk:
	BANKSEL	OSCCON
	bsf	OSCCON, 6	; 2Mhz		; 4ms
	bcf	OSCCON, 5
	bsf	OSCCON, 4
	bsf	OSCCON, 0	; Internal oscillator
	return
	
    config_tmr0:
	BANKSEL	OPTION_REG
	bcf	OPTION_REG, 5	; 8-bit Timer Mode
	bcf	OPTION_REG, 3	; Prescaler asignado a TMR0
	bcf	OPTION_REG, 2	; TMR0 Rate 1:8
	bsf	OPTION_REG, 1
	bcf	OPTION_REG, 0
	reset_tmr0 
	return
	
;============ CONFIG INTERRUPCIONES ============	
	
    config_int:
	BANKSEL	INTCON
	bsf	INTCON, 7 ; GIE
	bsf	INTCON, 3 ;RBIE
	bcf	INTCON, 0 ;RBIF
	bsf	INTCON, 5 ;T0IE
	return
   ;============ inicio PRINCIPAL ============
	
    inicial:			; inicio principal
	movf	PORTA, W
	movwf	count
	
	call	conversor		    ; conversion numero binario a decimal
	
	call	valor_displays   ; prepara el valor de los display
	
	btfsc	alarma, 0
	call	select_display	    ; muestra el valor en los display
	
	goto	inicial
 ;============ SUBRUTINAS DISPLAY ============
    
    select_display:		; seleccion del display a mostrar
	clrf    PORTD
	btfss	sel_dis, 1	; display 2 si sel_dis = 10
	goto	display_uni
	btfss   sel_dis, 0	; display 1 si sel_dis = 01
	goto    display_dec		
    display_cen:			; display 0 si sel_dis = 00
	movf    display0, W	; movemos el valor codificado 
	movwf   PORTC		; del display a PORTC 
	;bcf	PORTD,  2
	;bcf	PORTD,  1
	bsf     PORTD,  1	; dejamos solo el primer display
	bsf PORTD, 2
	goto    toggle_b0	; vamos a la funcion toggle
    display_dec:
	movf    display1, W
	movwf   PORTC
	;bcf	PORTD,  2
	bsf	PORTD,  0
	bsf	PORTD,  1 ;Solo el segundo display
	;bcf     PORTD,  0
	goto	toggle_b0
    display_uni:
	movf    display2, W
	movwf   PORTC
	bsf	PORTD,  0
	bsf	PORTD,  2 ; solo el primer display
	;bcf	PORTD,  1
	;bcf     PORTD,  0
    toggle_b0:			; cambia el valor de sel_dis
	incf	sel_dis		; aumenta el valor de 0 a 2
	bcf	alarma, 0	; apaga la alarmaa
	return
	
    valor_displays:		; codifica los valores de los valores de 
	movf    cont_b, W	; decimales por medio de la tabla de 7 segmentos
	call    tabla
	movwf   display0	; mueve el valor al display correspondiente
    
	movf    cont_c, W
	call    tabla
	movwf   display1
	
	movf    cont_a, W
	call    tabla
	movwf   display2
	
	return
	
    conversor:			; convierte valores decimales a binarios
	clrf	cont_c	; limpia el contador de centenas
	movlw	100		
	subwf	count, W	; resta 100 al valor del contador
	btfsc	CARRY		; cuando la resta es negativa se salta las instrucciones
	incf	cont_c	; aumenta el contador de centenas por cada vez que la resta es positiva
	btfsc	CARRY		
	movwf	count		; mueve el valor del acumulador a el contador como la resta de ambos numeros
	btfsc	CARRY	
	goto	$-7		; regresa a restar otros 100
	
	clrf	cont_b
	movlw	10
	subwf	count, W
	btfsc	CARRY
	incf	cont_b
	btfsc	CARRY
	movwf	count
	btfsc	CARRY	
	goto	$-7
	
	clrf	cont_a		; residuo de todas las operaciones son las unidades
	movf	count, W
	movwf	cont_a
	
	return
	
END	
